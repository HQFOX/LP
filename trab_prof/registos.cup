package lp;

import java_cup.runtime.*;
import Sintaxe.*;
import Sintaxe.Instrucoes.*;

import Sintaxe.Instrucoes.Acesso_Args.*;
import Sintaxe.Instrucoes.Acesso_Vars.*;
import Sintaxe.Instrucoes.Aritmetica.*;
import Sintaxe.Instrucoes.Chamada_Funcs.*;
import Sintaxe.Instrucoes.Man_Inteiros.*;
import Sintaxe.Instrucoes.Saida.*;
import Sintaxe.Instrucoes.Salto.*;

action code {:
  // cria uma instancia da maquina
  TISC maquina = new TISC();
:} ;

parser code {:
  //Yylex lexer;

  public void report_error(String message, Object error_info) {
    Symbol info = (Symbol) error_info;

    System.err.print("** " + message);
    System.err.println(" at `" + info.value + "' in position " + info.left
		       + " **");
  }

  public void report_fatal_error(String message, Object _) {
    System.err.println("** " + message);
  }
:} ;

//init with {: lexer = new Yylex(System.in); :} ;

//scan with {: return lexer.yylex(); :} ;

terminal        ADD, SUB, MULT, DIV, MOD, EXP ;
terminal        PUSH_INT, PUSH_VAR, STORE_VAR, PUSH_ARG, STORE_ARG ;
terminal        SET_ARG, CALL, LOCALS, RETURN ;
terminal        JUMP, JEQ, JLT ;
terminal        PRINT, PRINT_STR, PRINT_NL ;
terminal String IDENTIFICADOR ;
terminal String	INTEIRO, STRING ;
terminal        DOIS_PONTOS;
terminal	ERRO ;

non terminal TISC programa ;
non terminal      etiqueta, instrucao ;


programa ::= programa etiqueta instrucao
	       {: RESULT = maquina; :}
         |
	 ;

etiqueta ::= IDENTIFICADOR:e DOIS_PONTOS
			 {: maquina.getInstMemory().add_Label(e.toString(),maquina.getInstMemory().size()); :}
	 |
	 ;

instrucao ::= 
	      ADD
	      {: maquina.getInstMemory().add_Inst(new add()); :}
	  |   SUB
	  	  {: maquina.getInstMemory().add_Inst(new sub()); :}
	  |   MULT
	  	  {: maquina.getInstMemory().add_Inst(new mult()); :}
	  |   DIV
	  	  {: maquina.getInstMemory().add_Inst(new div()); :}
	  |   MOD
	  	  {: maquina.getInstMemory().add_Inst(new mod()); :}
	  |   EXP
	  	  {: maquina.getInstMemory().add_Inst(new exp()); :}
	  |   PUSH_INT INTEIRO:i
	  	  {: maquina.getInstMemory().add_Inst(new push_int(new Integer(i))); :}
	  |   PUSH_VAR INTEIRO:d INTEIRO:n
	  	  {: maquina.getInstMemory().add_Inst(new push_var(new Integer(d),new Integer(n))); :}
	  |   PUSH_ARG INTEIRO:d INTEIRO:n
	  	  {: maquina.getInstMemory().add_Inst(new push_arg(new Integer(d),new Integer(n))); :}
	  |   STORE_VAR INTEIRO:d INTEIRO:n
	  	  {: maquina.getInstMemory().add_Inst(new store_var(new Integer(d),new Integer(n))); :}
	  |   STORE_ARG INTEIRO:d INTEIRO:n
	  	  {: maquina.getInstMemory().add_Inst(new store_arg(new Integer(d),new Integer(n))); :}
	  |   SET_ARG INTEIRO:n
	  	  {: maquina.getInstMemory().add_Inst(new set_arg(new Integer(n))); :}
      |   CALL INTEIRO:d IDENTIFICADOR:p
      	  {: maquina.getInstMemory().add_Inst(new call(new Integer(d),p.toString())); :}
	  |   LOCALS INTEIRO:a INTEIRO:v
	  	  {: maquina.getInstMemory().add_Inst(new locals(new Integer(a),new Integer(v))); :}
	  |   RETURN
	  	  {: maquina.getInstMemory().add_Inst(new Return()); :}
	  |   JUMP IDENTIFICADOR:e
	  	  {: maquina.getInstMemory().add_Inst(new jump(e.toString())); :}
	  |   JEQ IDENTIFICADOR:e
	  	  {: maquina.getInstMemory().add_Inst(new jeq(e.toString())); :}
	  |   JLT IDENTIFICADOR:e
	  	  {: maquina.getInstMemory().add_Inst(new jlt(e.toString())); :}
	  |   PRINT
	  	  {: maquina.getInstMemory().add_Inst(new print()); :}
	  |   PRINT_STR STRING:s
	  	  {: maquina.getInstMemory().add_Inst(new print_string(s.toString())); :}
	  |   PRINT_NL
	  	  {: maquina.getInstMemory().add_Inst(new print_nl()); :}
	  ;
